const operatorsRegex = /[+\-*\/]/;
const maxDigit = 22;
//  plus minus multiply divide. backslash to escape character with special meaning


class MyCalculator extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      currentVal: '0', //cannot put 0 without ''. Becos string, not number
      evaluated: false
    }
    this.initialize =  this.initialize.bind(this);
    this.backspace = this.backspace.bind(this);
    this.handleNumbers = this.handleNumbers.bind(this);
    this.handleDecimal = this.handleDecimal.bind(this);
    this.handleOperators = this.handleOperators.bind(this);
    this.handleSolution = this.handleSolution.bind(this);
  }
  
  handleSolution() {
    this.setState({
      input: this.state.input + '=' + eval(this.state.input).toString(),
      currentVal: eval(this.state.input).toString(),
      evaluated: true
      
    });
  }
  
  handleOperators(e) {
    if (this.state.currentVal.length !== (maxDigit + 1)) {
      if (this.state.evaluated === true) {
        this.setState({
          input: this.state.currentVal + e.target.value,
          currentVal: e.target.value,
          evaluated: false
        })
      } else
        
        if (this.state.input ==='') {
          this.setState({
            input: '0' + e.target.value,
            currentVal: + this.state.currentVal + e.target.value
          })
        } else
        
        
      
      
      if (operatorsRegex.test(this.state.input.slice(-1))) {
        this.setState({
          input: this.state.input.slice(0, -1) + e.target.value,
          currentVal: e.target.value
        });
      } else {
        this.setState({
          input: this.state.input + e.target.value,
          currentVal: e.target.value
        });
      }
    }
  }

  handleDecimal(e) {
    if (this.state.currentVal.length !== maxDigit) {
    if (this.state.evaluated === true) {
      this.setState({
        input: '0' + e.target.value,
        currentVal: '0' + e.target.value,
        evaluated: false
      })
    } else

    
    
    if (this.state.input ==='') {
      this.setState({
        input: '0' + e.target.value,
        currentVal: + this.state.currentVal + e.target.value
      })
    } else
    
    
    if (this.state.input.includes(".") === false && operatorsRegex.test(this.state.input.slice(-1)) === false) {
      this.setState({
        input: this.state.input + e.target.value,
        currentVal: this.state.currentVal + e.target.value
      });
    } else
    // allow only one decimal input following last operator occurrence    
      if (this.state.input.search(/[+\-*\/](?=[^+\-*\/]*$)/) !== -1 &&   (this.state.input.slice(this.state.input.search(/[+\-*\/](?=[^+\-*\/]*$)/), this.state.input.length)).includes(".") === false && operatorsRegex.test(this.state.input.slice(-1)) === false) {
        this.setState({
          input: this.state.input + e.target.value,
          currentVal: this.state.currentVal + e.target.value
        });
      } else
    // add zero before decimal if not stated
        if (operatorsRegex.test(this.state.input.slice(-1))){
          this.setState({
            input: this.state.input + '0' + e.target.value,
            currentVal: '0' + e.target.value
          })
        }
    }
  }
  
  handleNumbers(e) {
    if (this.state.currentVal.length !== maxDigit) {

    if (this.state.evaluated === true) {
      this.setState({
        input: e.target.value,
        currentVal: e.target.value,
        evaluated: false
      })
    } else
    
    
    if (this.state.currentVal === '0') {
      this.setState({
        input: e.target.value,
        currentVal: e.target.value
      });
    } else if (operatorsRegex.test(this.state.currentVal)) {
      this.setState({
        input: this.state.input + e.target.value,
        currentVal: e.target.value
      })
    } else {
      this.setState({
        input: this.state.input + e.target.value,
        currentVal: this.state.currentVal + e.target.value
      });
    }
    }
  }
  
  initialize() {
    this.setState({
      input: '',
      currentVal: '0',
      evaluated: false
    });
  }
  
  backspace() {
    if (this.state.evaluated === true) {
      this.initialize();
    } else
    if (this.state.input !== '' && this.state.input.length !== 1) {
      this.setState({
        input: this.state.input.slice(0, this.state.input.length-1),
        currentVal: this.state.currentVal.slice(0, this.state.currentVal.length-1)
      });
    }
    else if (this.state.input.length === 1) {
      this.setState({
        input: '',
        currentVal: '0'
      });
    }
  }
  
  render() {
    return (
      <div>
        <div className="creator">JS/React Calculator by Ed</div>
        <div className="calculator">
          <Formula currentInput={this.state.input}/>
          <Output currentOutput={this.state.currentVal} />
          <Buttons 
            clearall={this.initialize} 
            backspace={this.backspace}
            numbers={this.handleNumbers}
            operators={this.handleOperators}
            decimal={this.handleDecimal}
            equal={this.handleSolution}
                   
            />
        </div>
        <div><h6>for FCC</h6></div>
        
      </div>
    )
  }
}

class Buttons extends React.Component {
  render() {
    return (
      <div>
        <button id="clear" value='AC' onClick={this.props.clearall}>AC</button>
        <button id="backspace" value='BS' onClick={this.props.backspace}>&#9003;</button>
        <button id="divide" value='/' onClick={this.props.operators}>/</button>
        <button id="seven" value='7' onClick={this.props.numbers}>7</button>
        <button id="eight" value='8' onClick={this.props.numbers}>8</button>
        <button id="nine" value='9' onClick={this.props.numbers}>9</button>
        <button id="multiply" value='*' onClick={this.props.operators}>x</button>
        <button id="four" value='4' onClick={this.props.numbers}>4</button>
        <button id="five" value='5' onClick={this.props.numbers}>5</button>
        <button id="six" value='6' onClick={this.props.numbers}>6</button>
        <button id="subtract" value='-' onClick={this.props.operators}>-</button>
        <button id="one" value='1' onClick={this.props.numbers}>1</button>
        <button id="two" value='2'onClick={this.props.numbers}>2</button>
        <button id="three" value='3' onClick={this.props.numbers}>3</button>
        <div>
        <button id="zero" value='0' onClick={this.props.numbers}>0</button>
        <button id="decimal" value='.' onClick={this.props.decimal}>.</button>
        <button id="equals" value='=' onClick={this.props.equal}>=</button>
        </div>
        <button id="add" value='+' onClick={this.props.operators}>+</button>
      </div>
    );
  }
}

class Formula extends React.Component {
  render() {
    return (
      <div className="formulaDisplay">{this.props.currentInput}
      </div>
    );
  }
}

class Output extends React.Component {
  render() {
    return (
      <div id="display" className="outputDisplay">{this.props.currentOutput}
      </div>
    );
  }
}


ReactDOM.render(<MyCalculator />, document.getElementById('app'));